// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String     @id @default(uuid())
  email    String  @unique
  password String
  name     String?
  avatar   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  familyId  String?
  family    Family?  @relation(fields: [familyId], references: [id])
  events    Event[]
  reminders Reminder[]
  documents Document[]
  subscription Subscription?
  isHead   Boolean  @default(false)
}

model Family {
  id         String      @id @default(uuid())
  name       String
  address String?
  city String?
  postalCode String?
  country String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  members    User[]
  events     Event[]
  documents  Document[]

}

model Event {
  id         String      @id @default(uuid())
  title      String
  description String?
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  familyId   String
  family     Family   @relation(fields: [familyId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Reminder {
  id         Int      @id @default(autoincrement())
  title      String
  description String?
  remindAt   DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Document {
  id         Int      @id @default(autoincrement())
  title      String
  filePath   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  familyId   String?
  family     Family?  @relation(fields: [familyId], references: [id])
}

model Subscription {
  id          String      @id @default(uuid())
  type        SubscriptionType
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String      @unique
  user        User     @relation(fields: [userId], references: [id])
}

enum SubscriptionType {
  FREE
  PAID
}
